# Tactical Location Service Docker Compose Configuration
# Version: 1.0.0
# Containerized location tracking service with ZeroTier integration

version: '3.8'

services:
  # PostgreSQL Database for Location Service
  location-postgres:
    image: postgres:15-alpine
    container_name: tactical-location-db
    environment:
      POSTGRES_DB: ${LOCATION_DB_NAME:-tactical_location}
      POSTGRES_USER: ${LOCATION_DB_USER:-tactical}
      POSTGRES_PASSWORD: ${LOCATION_DB_PASSWORD:-TacticalSecure2025!}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - location_postgres_data:/var/lib/postgresql/data
      - ./location-schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./postgres-config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "${LOCATION_DB_PORT:-5433}:5432"
    networks:
      - tactical-location-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${LOCATION_DB_USER:-tactical} -d ${LOCATION_DB_NAME:-tactical_location}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache for Location Service
  location-redis:
    image: redis:7-alpine
    container_name: tactical-location-cache
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-TacticalRedis2025!}
    volumes:
      - location_redis_data:/data
      - ./redis-config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "${REDIS_PORT:-6380}:6379"
    networks:
      - tactical-location-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # Location WebSocket Server
  location-websocket:
    build:
      context: .
      dockerfile: Dockerfile.websocket
      args:
        NODE_VERSION: 18-alpine
    container_name: tactical-location-websocket
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      WEBSOCKET_PORT: ${WEBSOCKET_PORT:-8443}
      DATABASE_HOST: location-postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: ${LOCATION_DB_NAME:-tactical_location}
      DATABASE_USER: ${LOCATION_DB_USER:-tactical}
      DATABASE_PASSWORD: ${LOCATION_DB_PASSWORD:-TacticalSecure2025!}
      REDIS_HOST: location-redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-TacticalRedis2025!}
      SSL_CERT_PATH: /certs/tactical.crt
      SSL_KEY_PATH: /certs/tactical.key
      MAX_CLIENTS: ${MAX_CLIENTS:-5}
      ZEROTIER_NETWORK_ID: ${ZEROTIER_NETWORK_ID}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - ${SSL_CERTS_PATH:-./certs}:/certs:ro
      - location_logs:/app/logs
    ports:
      - "${WEBSOCKET_PORT:-8443}:8443"
    networks:
      - tactical-location-network
      - tactical-main-network
    depends_on:
      location-postgres:
        condition: service_healthy
      location-redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "5"

  # Location REST API Server
  location-api:
    build:
      context: .
      dockerfile: Dockerfile.api
      args:
        NODE_VERSION: 18-alpine
    container_name: tactical-location-api
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      API_PORT: ${API_PORT:-3002}
      DATABASE_HOST: location-postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: ${LOCATION_DB_NAME:-tactical_location}
      DATABASE_USER: ${LOCATION_DB_USER:-tactical}
      DATABASE_PASSWORD: ${LOCATION_DB_PASSWORD:-TacticalSecure2025!}
      REDIS_HOST: location-redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-TacticalRedis2025!}
      JWT_SECRET: ${JWT_SECRET:-TacticalJWT2025SecretKey}
      CORS_ORIGINS: ${CORS_ORIGINS:-https://tactical.local,https://192.168.100.1}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-900000}
      RATE_LIMIT_MAX: ${RATE_LIMIT_MAX:-100}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - location_logs:/app/logs
    ports:
      - "${API_PORT:-3002}:3002"
    networks:
      - tactical-location-network
      - tactical-main-network
    depends_on:
      location-postgres:
        condition: service_healthy
      location-redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "5"

  # Location Data Cleanup Service
  location-cleanup:
    build:
      context: .
      dockerfile: Dockerfile.cleanup
      args:
        NODE_VERSION: 18-alpine
    container_name: tactical-location-cleanup
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_HOST: location-postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: ${LOCATION_DB_NAME:-tactical_location}
      DATABASE_USER: ${LOCATION_DB_USER:-tactical}
      DATABASE_PASSWORD: ${LOCATION_DB_PASSWORD:-TacticalSecure2025!}
      CLEANUP_INTERVAL: ${CLEANUP_INTERVAL:-21600} # 6 hours
      LOCATION_RETENTION: ${LOCATION_RETENTION:-24} # 24 hours
      ALERT_RETENTION: ${ALERT_RETENTION:-168} # 7 days
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - location_logs:/app/logs
    networks:
      - tactical-location-network
    depends_on:
      location-postgres:
        condition: service_healthy
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy for Location Services
  location-proxy:
    image: nginx:alpine
    container_name: tactical-location-proxy
    volumes:
      - ./nginx/location-nginx.conf:/etc/nginx/nginx.conf:ro
      - ${SSL_CERTS_PATH:-./certs}:/etc/nginx/certs:ro
      - location_logs:/var/log/nginx
    ports:
      - "${LOCATION_PROXY_HTTP_PORT:-8080}:80"
      - "${LOCATION_PROXY_HTTPS_PORT:-8443}:443"
    networks:
      - tactical-location-network
      - tactical-main-network
    depends_on:
      - location-websocket
      - location-api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Location Service Monitoring
  location-monitor:
    build:
      context: .
      dockerfile: Dockerfile.monitor
      args:
        NODE_VERSION: 18-alpine
    container_name: tactical-location-monitor
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      MONITOR_PORT: ${MONITOR_PORT:-3003}
      DATABASE_HOST: location-postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: ${LOCATION_DB_NAME:-tactical_location}
      DATABASE_USER: ${LOCATION_DB_USER:-tactical}
      DATABASE_PASSWORD: ${LOCATION_DB_PASSWORD:-TacticalSecure2025!}
      REDIS_HOST: location-redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-TacticalRedis2025!}
      WEBSOCKET_URL: ws://location-websocket:8443
      API_URL: http://location-api:3002
      CHECK_INTERVAL: ${CHECK_INTERVAL:-30000} # 30 seconds
      ALERT_WEBHOOK: ${ALERT_WEBHOOK:-}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - location_logs:/app/logs
    ports:
      - "${MONITOR_PORT:-3003}:3003"
    networks:
      - tactical-location-network
    depends_on:
      - location-postgres
      - location-redis
      - location-websocket
      - location-api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 60s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# Named volumes for persistent data
volumes:
  location_postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/postgres
  
  location_redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/redis
  
  location_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOGS_PATH:-./logs}

# Networks
networks:
  tactical-location-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: tactical-location
  
  tactical-main-network:
    external: true
    name: tactical-network

# Configuration for development override
# Use: docker-compose -f docker-compose.location.yml -f docker-compose.location.dev.yml up
---
# docker-compose.location.dev.yml (development overrides)
version: '3.8'

services:
  location-postgres:
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: tactical_location_dev
    volumes:
      - ./dev-data/postgres:/var/lib/postgresql/data

  location-redis:
    ports:
      - "6380:6379"
    volumes:
      - ./dev-data/redis:/data

  location-websocket:
    environment:
      NODE_ENV: development
      LOG_LEVEL: debug
    volumes:
      - .:/app
      - /app/node_modules
    command: npm run dev:websocket

  location-api:
    environment:
      NODE_ENV: development
      LOG_LEVEL: debug
    volumes:
      - .:/app
      - /app/node_modules
    command: npm run dev:api

  location-cleanup:
    environment:
      NODE_ENV: development
      CLEANUP_INTERVAL: 300 # 5 minutes for testing
      LOG_LEVEL: debug

  location-monitor:
    environment:
      NODE_ENV: development
      CHECK_INTERVAL: 10000 # 10 seconds for testing
      LOG_LEVEL: debug
    volumes:
      - .:/app
      - /app/node_modules
    command: npm run dev:monitor